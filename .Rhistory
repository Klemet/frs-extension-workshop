fragmentationDF
listOfResultsNoAgg[[1]]
preAllocationLength <- length(listOfRoadRasterFilesWithAggregation)
fragmentationDF <- data.frame(Timestep = integer(preAllocationLength),
Clumpy_No_Agg = double(preAllocationLength),
Clumpy_With_Agg = double(preAllocationLength),
TCA_No_Agg = double(preAllocationLength),
TCA_With_Agg = double(preAllocationLength))
colnames(fragmentationDF) = c("Timestep", "Clumpy - No-Agg scenario", "Clumpy - With-Agg scenario",
"TCA - No-Agg scenario", "TCA - With-Agg scenario")
for(i in seq(0, length(listOfRoadRasterFilesWithAggregation) - 1))
{
# We insert the results into the data frame
fragmentationDF[i+1,] <- c(i*10, listOfResultsNoAgg[[i+1]]$value[2], listOfResultsWithAgg[[i+1]]$value[2],
listOfResultsNoAgg[[i+1]]$value[4], listOfResultsWithAgg[[i+1]]$value[4])
}
fragmentationDF
listOfResultsNoAgg = list()
listOfResultsWithAgg = list()
# We loop around the raster files
for(i in seq(0, length(listOfRoadRasterFilesWithAggregation) - 1))
{
# We load the road raster for the no-agg scenario
roadRasterNoAggregation <- raster(paste(roadOutputsScenarioNoAgg, listOfRoadRasterFilesNoAggregation[i+1], sep = ''))
# We give him the same extent (position in space) than the raster with the forest pixels
# (This is because LANDIS-II outputs are no georeferenced)
roadRasterNoAggregation = setExtent(roadRasterNoAggregation, forestRasters)
# We reclassify the road raster
roadRasterNoAggregation <- reclassify(roadRasterNoAggregation, reclass_vector_road)
# Now, we mask the foret raster with the road raster;
# This means that any pixel of raster with a road pixel on it
# will be equal to 0, making it as it has no forest.
maskedForestNoAgg = mask(forestRasters, roadRasterNoAggregation, maskvalue = 0, updatevalue = 0)
# Now, we compute two fragmentation indices : Clumpy and TCA
ClumpyResults = lsm_c_clumpy(maskedForestNoAgg)
resultsNoAgg = ClumpyResults
resultsNoAgg = bind_rows(resultsNoAgg,
lsm_c_tca(maskedForestNoAgg, directions = 4))
# We put the results in the list of results
listOfResultsNoAgg[[listOfRoadRasterFilesNoAggregation[i+1]]] <- resultsNoAgg
# We do the same with the with-agg scenario
roadRasterWithAggregation <- raster(paste(roadOutputsScenarioWithAgg, listOfRoadRasterFilesWithAggregation[i+1], sep = ''))
roadRasterWithAggregation = setExtent(roadRasterWithAggregation, forestRasters)
roadRasterWithAggregation <- reclassify(roadRasterWithAggregation, reclass_vector_road)
maskedForestWithAgg = mask(forestRasters, roadRasterWithAggregation, maskvalue = 0, updatevalue = 0)
ClumpyResults = lsm_c_clumpy(maskedForestWithAgg)
resultsWithAgg = ClumpyResults
resultsWithAgg = bind_rows(resultsWithAgg,
lsm_c_tca(maskedForestWithAgg, directions = 4))
listOfResultsWithAgg[[listOfRoadRasterFilesWithAggregation[i+1]]] <- resultsWithAgg
}
preAllocationLength <- length(listOfRoadRasterFilesWithAggregation)
fragmentationDF <- data.frame(Timestep = integer(preAllocationLength),
Clumpy_No_Agg = double(preAllocationLength),
Clumpy_With_Agg = double(preAllocationLength),
TCA_No_Agg = double(preAllocationLength),
TCA_With_Agg = double(preAllocationLength))
colnames(fragmentationDF) = c("Timestep", "Clumpy - No-Agg scenario", "Clumpy - With-Agg scenario",
"TCA - No-Agg scenario", "TCA - With-Agg scenario")
for(i in seq(0, length(listOfRoadRasterFilesWithAggregation) - 1))
{
# We insert the results into the data frame
fragmentationDF[i+1,] <- c(i*10, listOfResultsNoAgg[[i+1]]$value[2], listOfResultsWithAgg[[i+1]]$value[2],
listOfResultsNoAgg[[i+1]]$value[4], listOfResultsWithAgg[[i+1]]$value[4])
}
fragmentationDF
# Now, we plot the evolution of Clumpy between scenarios
plot(fragmentationDF$`Clumpy - No-Agg scenario`~fragmentationDF$Timestep,
main = "Clumpy throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="Road density (%)",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17)
# We plot the second line
lines(fragmentationDF$`Clumpy - With-Agg scenario`~fragmentationDF$Timestep,
col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
# We add a legend to the plot
legend("bottomright",
legend = c("No-Agg Scenario", "With-Agg Scenario"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
plot(fragmentationDF$`Clumpy - No-Agg scenario`~fragmentationDF$Timestep,
main = "Clumpy throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="Road density (%)",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17)
# We plot the second line
lines(fragmentationDF$`Clumpy - With-Agg scenario`~fragmentationDF$Timestep,
col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
# We add a legend to the plot
legend("topright",
legend = c("No-Agg Scenario", "With-Agg Scenario"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
# Now, we plot the evolution of Clumpy between scenarios
plot(fragmentationDF$`Clumpy - No-Agg scenario`~fragmentationDF$Timestep,
main = "Clumpy throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="Clumpy",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17,
ylim = c(0,1))
# We plot the second line
lines(fragmentationDF$`Clumpy - With-Agg scenario`~fragmentationDF$Timestep,
col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
# We add a legend to the plot
legend("topright",
legend = c("No-Agg Scenario", "With-Agg Scenario"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
# Now, we plot the evolution of Clumpy between scenarios
plot(fragmentationDF$`Clumpy - No-Agg scenario`~fragmentationDF$Timestep,
main = "Clumpy throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="Clumpy",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17,
ylim = c(0.4,1))
# We plot the second line
lines(fragmentationDF$`Clumpy - With-Agg scenario`~fragmentationDF$Timestep,
col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
# We add a legend to the plot
legend("topright",
legend = c("No-Agg Scenario", "With-Agg Scenario"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
plot(fragmentationDF$`TCA - No-Agg scenario`~fragmentationDF$Timestep,
main = "TCA throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="TCA",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17,
ylim = c(0.4,1))
# We plot the second line
lines(fragmentationDF$`TCA - With-Agg scenario`~fragmentationDF$Timestep,
col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
# We add a legend to the plot
legend("topright",
legend = c("No-Agg Scenario", "With-Agg Scenario"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
plot(fragmentationDF$`TCA - No-Agg scenario`~fragmentationDF$Timestep,
main = "TCA throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="TCA",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17)
# We plot the second line
lines(fragmentationDF$`TCA - With-Agg scenario`~fragmentationDF$Timestep,
col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
# We add a legend to the plot
legend("topright",
legend = c("No-Agg Scenario", "With-Agg Scenario"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
# 1) Loading the right working directory.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# 2) Reading the .csv file containing the construction costs.
data <- read.csv(file="road_costs_data.csv",
header=TRUE,
sep=",")
# 3) We make sure that the different columns are treated as factors.
data$road_type <- as.factor(data$road_type)
data$slope <- as.factor(data$slope)
# 4) We define the reference slope, that will be inside the basal cost : the 0_8% category.
data$slope <- relevel(data$slope, ref="0_8%")
# 5) We select only the data related to the type of path of reference.
dataSubset <- data[data$road_type == "Tertiary",]
library(gtools)
library(dplyr)
library(landscapemetrics)
library(raster)
# Set ourselves where the present file is
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Define the different paths that we will need
roadOutputsScenarioNoAgg <- "../scenario-no-aggregation/output/disturbances/roads/"
roadOutputsScenarioWithAgg <- "../scenario-with-aggregation/output/disturbances/roads/"
sharedRasters <- "../shared-rasters/"
# We get all of the rasters of road density
print("Reading the raster road files for scenario \"no aggregation\".")
# List all the files in the folder
listOfRoadRasterFilesNoAggregation = list.files(roadOutputsScenarioNoAgg)
# Keep the files with .tif in them, and without the word "flux" or "Cost" in them
listOfRoadRasterFilesNoAggregation = Filter(function(x) grepl("tif", x, fixed = TRUE), listOfRoadRasterFilesNoAggregation)
listOfRoadRasterFilesNoAggregation = Filter(function(x) !(grepl("Flux|Cost|xml|aux", x, fixed = FALSE)), listOfRoadRasterFilesNoAggregation)
# Order the files in natural order
listOfRoadRasterFilesNoAggregation = mixedsort(listOfRoadRasterFilesNoAggregation, decreasing = TRUE)
# Same thing for the scenario with aggregation
print("Reading the raster road files for scenario \"with aggregation\".")
listOfRoadRasterFilesWithAggregation = list.files(roadOutputsScenarioNoAgg)
listOfRoadRasterFilesWithAggregation = Filter(function(x) grepl("tif", x, fixed = TRUE), listOfRoadRasterFilesWithAggregation)
listOfRoadRasterFilesWithAggregation = Filter(function(x) !(grepl("Flux|Cost|xml|aux", x, fixed = FALSE)), listOfRoadRasterFilesWithAggregation)
listOfRoadRasterFilesWithAggregation = mixedsort(listOfRoadRasterFilesWithAggregation, decreasing = TRUE)
# We load the raster of ecoregions right now
ecoregionsRaster <- raster(paste(sharedRasters, "ecoregions.tif", sep = ''))
# We define the vector for reclassification
# This
reclass_vector_ecoregions <- c(-1, 1, 0,
1, Inf, 1)
# Reclassify the raster
forestRasters <- reclassify(ecoregionsRaster, reclass_vector_ecoregions)
# Importantly, we fill the NA values in the raster with 0. This is important
# to avoid errors when the fragmentation indices are computed.
forestRasters[is.na(forestRasters[])] <- 0
# We will fill a dataframe with the percentage of cells in the landscape
# occupied by roads at any point.
preAllocationLength <- length(listOfRoadRasterFilesWithAggregation)
roadDensityDf <- data.frame(Timestep = integer(preAllocationLength),
Road_Density_No_Agg = double(preAllocationLength),
Road_Density_With_Agg = double(preAllocationLength))
colnames(roadDensityDf) = c("Timestep", "Road density - No-Agg scenario", "Road density - With-Agg scenario")
# We loop around each raster file
for(i in seq(0, length(listOfRoadRasterFilesWithAggregation) - 1))
{
# We get the number of pixels with roads (!= 0) in the road raster
# for the no-aggregation scenario
roadRasterNoAggregation <- raster(paste(roadOutputsScenarioNoAgg, listOfRoadRasterFilesNoAggregation[i+1], sep = ''))
totalNumberOfPixels <- sum(freq(roadRasterNoAggregation)[,2])
numberOfRoadPixels <- sum(freq(roadRasterNoAggregation)[2:nrow(freq(roadRasterNoAggregation)),2])
roadDensityNoAggregation <- (numberOfRoadPixels/totalNumberOfPixels) * 100
# We do the same for the with-aggregation scenario
roadRasterWithAggregation <- raster(paste(roadOutputsScenarioWithAgg, listOfRoadRasterFilesWithAggregation[i+1], sep = ''))
totalNumberOfPixels <- sum(freq(roadRasterWithAggregation)[,2])
numberOfRoadPixels <- sum(freq(roadRasterWithAggregation)[2:nrow(freq(roadRasterWithAggregation)),2])
roadDensityWithAggregation <- (numberOfRoadPixels/totalNumberOfPixels) * 100
# We insert the results into the data frame
roadDensityDf[i+1,] <- c(i*10, roadDensityNoAggregation, roadDensityWithAggregation)
}
# We plot the first line, for the no-agg scenario
plot(roadDensityDf$`Road density - No-Agg scenario`~roadDensityDf$Timestep,
main = "Road density throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="Road density (%)",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17)
# We plot the second line
lines(roadDensityDf$`Road density - With-Agg scenario`~roadDensityDf$Timestep,
col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
# We add a legend to the plot
legend("bottomright",
legend = c("No-Agg Scenario", "With-Agg Scenario"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
roadLogNoAgg <- read.csv(file="../scenario-no-aggregation/Forest Roads Construction Log.csv",
header=TRUE,
sep=",")
roadLogWithAgg <- read.csv(file="../scenario-with-aggregation/Forest Roads Construction Log.csv",
header=TRUE,
sep=",")
# We plot the first line, for the no-agg scenario
plot(roadLogNoAgg$CostOfConstructionAndRepairs~roadLogWithAgg$Timestep,
main = "Road costs throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="Road density (%)",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17,
ylim=c(400000000,1100000000))
# We plot the second line
lines(roadLogWithAgg$CostOfConstructionAndRepairs~roadLogWithAgg$Timestep,
col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
# We add a legend to the plot
legend("topright",
legend = c("No-Agg Scenario", "With-Agg Scenario"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
# We plot the first line, for the no-agg scenario
plot(roadLogNoAgg$CostOfConstructionAndRepairs~roadLogWithAgg$Timestep,
main = "Road costs throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="Road density (%)",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17)
# We plot the second line
lines(roadLogWithAgg$CostOfConstructionAndRepairs~roadLogWithAgg$Timestep,
col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
# We add a legend to the plot
legend("topright",
legend = c("No-Agg Scenario", "With-Agg Scenario"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
# We plot the first line, for the no-agg scenario
plot(roadLogNoAgg$CostOfConstructionAndRepairs~roadLogWithAgg$Timestep,
main = "Road costs throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="Costs of construction and repairs of roads ($CA)",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17)
# We plot the first line, for the no-agg scenario
plot(roadLogNoAgg$CostOfConstructionAndRepairs~roadLogWithAgg$Timestep,
main = "Road costs throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="Costs of construction and repairs of roads ($CA)",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17)
# We plot the second line
lines(roadLogWithAgg$CostOfConstructionAndRepairs~roadLogWithAgg$Timestep,
col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
# We add a legend to the plot
legend("topright",
legend = c("No-Agg Scenario", "With-Agg Scenario"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
# First, we prepare a vector to reclassify the road raster
# With this, every pixel without a road will be 1, and every pixel
# with a road will be 0, allowing us to "mask" another raster.
reclass_vector_road <- c(-1, 1, 1,
1, Inf, 0)
# We prepare the list of results
listOfResultsNoAgg = list()
listOfResultsWithAgg = list()
# We loop around the raster files
for(i in seq(0, length(listOfRoadRasterFilesWithAggregation) - 1))
{
# We load the road raster for the no-agg scenario
roadRasterNoAggregation <- raster(paste(roadOutputsScenarioNoAgg, listOfRoadRasterFilesNoAggregation[i+1], sep = ''))
# We give him the same extent (position in space) than the raster with the forest pixels
# (This is because LANDIS-II outputs are no georeferenced)
roadRasterNoAggregation = setExtent(roadRasterNoAggregation, forestRasters)
# We reclassify the road raster
roadRasterNoAggregation <- reclassify(roadRasterNoAggregation, reclass_vector_road)
# Now, we mask the foret raster with the road raster;
# This means that any pixel of raster with a road pixel on it
# will be equal to 0, making it as it has no forest.
maskedForestNoAgg = mask(forestRasters, roadRasterNoAggregation, maskvalue = 0, updatevalue = 0)
# Now, we compute two fragmentation indices : Clumpy and TCA
ClumpyResults = lsm_c_clumpy(maskedForestNoAgg)
resultsNoAgg = ClumpyResults
resultsNoAgg = bind_rows(resultsNoAgg,
lsm_c_tca(maskedForestNoAgg, directions = 4))
# We put the results in the list of results
listOfResultsNoAgg[[listOfRoadRasterFilesNoAggregation[i+1]]] <- resultsNoAgg
# We do the same with the with-agg scenario
roadRasterWithAggregation <- raster(paste(roadOutputsScenarioWithAgg, listOfRoadRasterFilesWithAggregation[i+1], sep = ''))
roadRasterWithAggregation = setExtent(roadRasterWithAggregation, forestRasters)
roadRasterWithAggregation <- reclassify(roadRasterWithAggregation, reclass_vector_road)
maskedForestWithAgg = mask(forestRasters, roadRasterWithAggregation, maskvalue = 0, updatevalue = 0)
ClumpyResults = lsm_c_clumpy(maskedForestWithAgg)
resultsWithAgg = ClumpyResults
resultsWithAgg = bind_rows(resultsWithAgg,
lsm_c_tca(maskedForestWithAgg, directions = 4))
listOfResultsWithAgg[[listOfRoadRasterFilesWithAggregation[i+1]]] <- resultsWithAgg
}
# Now, we catch the results in the tibbles that landscapemetrics outputs
# into a dataframe, so that we can plot everything.
preAllocationLength <- length(listOfRoadRasterFilesWithAggregation)
fragmentationDF <- data.frame(Timestep = integer(preAllocationLength),
Clumpy_No_Agg = double(preAllocationLength),
Clumpy_With_Agg = double(preAllocationLength),
TCA_No_Agg = double(preAllocationLength),
TCA_With_Agg = double(preAllocationLength))
for(i in seq(0, length(listOfRoadRasterFilesWithAggregation) - 1))
{
# We insert the results into the data frame
fragmentationDF[i+1,] <- c(i*10, listOfResultsNoAgg[[i+1]]$value[2], listOfResultsWithAgg[[i+1]]$value[2],
listOfResultsNoAgg[[i+1]]$value[4], listOfResultsWithAgg[[i+1]]$value[4])
}
colnames(fragmentationDF) = c("Timestep", "Clumpy - No-Agg scenario", "Clumpy - With-Agg scenario",
"TCA - No-Agg scenario", "TCA - With-Agg scenario")
# Now, we plot the evolution of Clumpy between scenarios
plot(fragmentationDF$`Clumpy - No-Agg scenario`~fragmentationDF$Timestep,
main = "Clumpy throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="Clumpy",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17,
ylim = c(0.4,1))
lines(fragmentationDF$`Clumpy - With-Agg scenario`~fragmentationDF$Timestep,
col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
legend("topright",
legend = c("No-Agg Scenario", "With-Agg Scenario"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
# We do the same with TCA
plot(fragmentationDF$`TCA - No-Agg scenario`~fragmentationDF$Timestep,
main = "TCA throught time\nin LANDIS-II simulations",
type="b",
bty="l",
xlab="Time",
ylab="TCA",
col=rgb(0.2,0.4,0.1,0.7),
lwd=3,
pch=17)
lines(fragmentationDF$`TCA - With-Agg scenario`~fragmentationDF$Timestep,
col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
legend("topright",
legend = c("No-Agg Scenario", "With-Agg Scenario"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
install.packages(c("rmarkdown", "bookdown"))
install.packages("devtools")
devtools::install_github("hadley/emo")
