[["index.html", "The FRS Module Training Workshop Welcome Objectives Plan Prerequisites Presenter", " The FRS Module Training Workshop Clément Hardy 2021-06-28 Welcome Welcome to the training workshop of the FRS module ! The Forest Roads Simulation (FRS) module is an extension of the LANDIS-II Forest Landscape Model (FLM). It was created so as to help researchers in ecology to take into account the constructions of forest roads when studying the impacts of forest management on forest landscapes. Before you start :  Change the appearance of the page to your liking by clicking the A button at the top left of the screen.   Move between the pages of the workshop by using the right and left arrows of your keyboard, or by using the table of content on your left.  Plan 3 to 4 hours of reading and exercises if you want to read everything in details. Happy reading ! Objectives This workshop is here to train you to use the FRS module for your own research, and to understand :  How the FRS module functions.  How to parameterize the FRS module.  How to visualize and analyse the outputs of the FRS module. Plan This web page contains the content of the workshop, which is organized into three parts : A presentation of the FRS module. An exercice to create the parameter files for a simulation using the FRS module. An exercise to visualise and analyse the outputs of simulations using the FRS module. Prerequisites In order to do the exercices of the workshop, you will need the following software installed on your computer : LANDIS-II v. 7 Age-only Succession Extension v. 5.2 Base Harvest Extension v. 5.1 FRS module v. 1.2 QGIS 3.X R or R studio Package gtools Package dplyr Package raster Package landscapemetrics  To install all of these R packages at once, use the command install.packages(\"gtools\", \"dplyr\", \"raster\", \"landscapemetrics\") in R. Presenter Clément Hardy I am a PhD student in forest ecology, under the supervision of Elise Filotas and Christian Messier. I am also the developer of the FRS module, and my PhD subject concerns the long-term and large scale impacts of uneven-aged management. If you want to learn more about it, check out my GitHub page ! "],["01-presentation.html", "Presentation Why are forest roads so important ? The FRS module The functioning of the FRS module", " Presentation Why are forest roads so important ? Forest roads are a particular type of roads (Gucinski 2001). They are often defined in an implicit manner in articles that talk about them. Here, we will define forest roads road as roads that have been constructed to access forest ressources, even if they can be maintained for several purposes (Hunt, Lemelin, and Saunders 2009; Laschi et al. 2016; Thompson, Gannon, and Caggiano 2021; Zhang et al. 2020). These roads traverse forest ecosystems, and they often present a surface layer of gravel or of local soil, even if they can sometimes be paved. Forest roads are not always taken into account when talking about the effects and impacts of forest management. However, they can have important effects on forest ecosystems (Boston 2016). Indeed, they have been shown to : Reduce the surrounding macroinvertebrate soil faune (Haskell 2000) Reduce the abundance of some beetles (Koivula 2005) Alter the quality of habitat for several species of birds (Ortega and Capen 1999) Fragment the forest landscape more than clearcuts do (Reed, Johnson-Barnard, and Baker 1996) Repeal forest species such as the elk (Witmer and deCalesta 1985) Increase the predation of caribou by wolves (James and Stuart-Smith 2000; Whittington et al. 2011) Shape the spatial boundaries of forest fires (Narayanaraj and Wimberly 2011; Yocom et al. 2019) Create social issues between different types of users of the forest : aboriginal communities, recreationists, hunters, and so on (Adam, Kneeshaw, and Beckley 2012; Bourgeois, Kneeshaw, and Boisseau 2005; Hunt, Lemelin, and Saunders 2009; Kneeshaw and Gauthier 2006). They also represent an important operational cost for forestry industries, varying between 5% to almost 18% of the total operational costs (Groupe DDM and MFFP du Québec 2020; Toscani, Sekot, and Holzleitner 2020). As you can see, forest roads can have many different impacts, and are important to take into account when studying forest ecosystems at the landscape scale. That is why their simulation with changing forest management strategies and legislation can be crucial to better conserve forest ecosystems.  Examples of research questions in ecology related to the simulation of forest roads : How do different forest management strategies fragment the landscape, when forest roads are taken into account ? What will be the impact of forest roads on endangered species, as they increase the movement of potential predators ? How will forest roads constructed in a newly harvested area affect hunting pressure The FRS module The Forest Road Simulation (FRS) module is an extension for LANDIS-II, whose goal is to dynamically simulate a forest road network according to the harvested areas in the landscape. Here is an animation showing the evolution of road networks simulated with the FRS module in Quebec : Goals of the FRS module The FRS module was designed with 4 considerations in mind : It should be easy to understand and use It should be able to reproduce the main characteristics of a real forest road network at the landscape scale It should not rely on low-level features of forest roads network that have limited influence at the landscape scale It should have a performance comparable to those of other LANDIS-II extensions We will now see how those considerations are tackled by the FRS module. However, if you want to know all of the details concerning the functioning and the performance of the module, you should read the article presenting the module (Hardy et al. 2021), as well as the user guide. Structure of the FRS module The FRS module interacts with the simulation made by LANDIS-II in a particular way. Indeed, in its current version, its functioning is influenced by the presence of areas harvested by a harvest extension. However, it does not influence the position of the harvested area, and it currently does not influence the forest landscape either. As such, the FRS module edits its own particular spatial dataset in parallel to the vegetation map simulated by LANDIS-II. We call this dataset, which is a raster map with the same exact format as the other spatial data in LANDIS-II, the road landscape. Hence, the FRS module creates roads on raster cells, using pathfinding algorithms. The roads that it creates are not vectorial, as this would require a lot more computations and parameters for a questionable gains in terms its ability to replicate reality. Solving the MTAP To properly understand how the FRS module functions, one has to understand the Multiple Target Access Problem (MTAP). The MTAP is simply the problem of trying to reach multiple targets (nodes) in a graph via roads that link them (vertices) in an optimal way (least-cost, least-distance, best speed, etc.). As the number of targets increase, the number of possible configurations for the resulting road network becomes very great. How, then, can we find the optimal configuration according to a set of priorities ? Which roads (or vertices) should be built, and which ones should not ? With the advances in computer technology, the MTAP was formulated and described in the context of forest operations (Heinimann 2017). However, despite the capacity of computer to execute an enormous number of calculations, the MTAP can still be considered unsolvable in reasonable time frames as soon as a certain number of targets is reached, because of the near-infinite number of possible configurations for the network. This is especially true if the cost associated with the vertices (as a cost of construction) must be calculated at the same time. Meanwhile, there exist another type of problem that computers are able to solve in a very, very short time : the Single Target Access Problem (STAP). In a STAP, as only one target exist, the only calculation that should be made is to determine the best path, road or vertex to the target. The STAP can be easily solved with the use of a pathfinding algorithm, such as the famous Dijkstra algorithm (Dijkstra 1959). Therefore, one possible way to solve a MTAP is to use a heuristic to transform in MTAP into an ordered set of STAPs that will be solved one after the other by a pathfinding algorithm. This approach is used in professional software, such as Remsofts Road Optimizer (Remsoft 2019), and has been used in previous research on the problem of forest road network design (Anderson, Nelson, and DEon 2006; Heinimann 2017). Different heuristics can be used, in order to determine the set of STAP to solve (Shirasawa and Hasegawa 2014). Such heuristics can be make roads toward target nearest to a road first, or make roads to and between targets in a random order. Note that in the MTAP, the targets are already determined. This makes the MTAP different from what is called an integrated forest harvest-scheduling, which corresponds to finding the optimal location of areas to harvest, alongside an optimal configuration for the resulting forest road network (Heinimann 2017). The FRS module doesnt go that far, and lets the harvest extensions of LANDIS-II decide where the harvested areas will be located. Therefore, the FRS module solves an MTAP using a heuristics, and lets the user choose amongst three : Closest first (build roads to area closest to existing roads first); Farthest first (the opposite of Closest first); and Random (build roads to harvested areas in a random order). To determine the path of the roads in space, the FRS module uses the Dijkstra algorithm, along with a cost map. The functioning of the FRS module Now that we have seen the theory behind the design of the FRS module, we will quickly talk about its functioning. Again, readers interested in more details than what is given here can take a look at the article presenting the module (Hardy et al. 2021), as well as the user guide. Initialisation phase LANDIS-II simulations always start with an initialisation phase, during which the different rasters needed by the model are read, the parameters read, and the different extensions prepared for the rest of the simulation. The FRS module uses the initialisation phase to create what is called the cost map. The cost map is a raster map in which each pixel represent the estimated cost of construction to construct a road in order to cross the pixel, whatever the direction of the crossing. Here is an example of a cost map generated by the FRS module : On this cost map, you can see water bodies very clearly, as they require constructing bridges that can be very costly to construct, or even prohibited depending on the legislation in place. The path of streams are visible, as they require one or multiple culverts to be posed to traverse them. Then, you can see that the costs of constructions change according to the slope. To create such a map, the FRS module uses maps of landscape features and several cost parameters associated to them. Only one landscape feature - and its associated parameters - is necessary; the others are optional, in order to adapt to what data the user has at hand. However, the more features are taken into account, the more the roads created by the module will be realistic. Currently, the FRS module can take into account : The slope The presence of topographic obstacles requiring a detour (cliffs, breaks, etc.) The presence of bodies of water (lakes, rivers) The presence of streams The types of soil Once that the cost map has been created, the FRS module ends up the initialisation phase by completing the initial road network map that has been given by the user. Indeed, this map should contain existing roads and forest roads, alongside what we called exit points. This category is considered by the module as places where the wood harvested in the landscape can exit the landscape (to be sold or used). Every initial road landscape must have at least one site of this category, as the FRS module has for objective to connect harvested areas to exit points, or to roads that are connected to exit points themselves. Currently, exit points are static throughout the simulation: they are not created or deleted through time. If some roads in the initial road landscape are not connected to any exit points, the FRS module will complete the network by adding new road segments so that they are connected. This is done in order to correct possible missing roads in road databases. During the simulation Once that the initialisation phase of LANDIS-II is other, the simulation starts. Each extension of LANDIS-II are called, according to their time step. The FRS module should be parameterized to always be called after the harvest extension has been activated. Once that it activates, the FRS module functions this way : If road aging has been activated, the FRS module will age the roads of the landscape. If the roads become older than their maximum age of use, they are considered destroyed. Every road starts at an age 0 when constructed, and this age is only reset when a road is updated (see below). If a road is destroyed and then rebuilt in the same timestep, it is considered as repaired. The cells recently harvested by the harvest extension are ordered according to the heuristic chosen by the user. Hence, each cell represents a target to reach in the MTAP. Roads are constructed to the recently harvested cell, by considering them in their order. However, a road is only built if the given harvested cell is not already at a skidding distance from an existing road. In that case, the wood is considered as skidded to the nearby road pixel. Roads that are built must lead to the recently harvested cell of interest, but can start from any existing road pixel, as long as this road pixel is connected one way or another to an exit point. If the loop algorithm is activated, the FRS module will attempt to create a loop in the road network. It does this by creating a second road to the recently harvested cell. This can be important for certain fragmentation indices that are sensitive to the existence of patches that are completely surrounded by roads or by non-forest habitat. If the harvest extension is parameterized to use repeated harvested (e.g. shelterwood harvest or periodic uneven-aged cuts), then the FRS module will adapt to the need to return to the harvested cell in the futur. In particular, the module will chose the cheapest option between creating a low-grade road that might need to be re-built or repaired for the next passage; or a higher-grade road, more costly, that will still be in place next time. Finally, if the computation of wood fluxes is activated, the FRS module will simulate the transport of wood from the harvested area to the exit points of the landscape. This flux will influence the way that forest roads are upgraded to larger, higher-grade roads to adapt to the flux of trucks. Once that all of this is done, the FRS module creates raster maps corresponding to snapshots of the road landscape at the end of the time step, and then stops until the next time step when it will be activated. References "],["02-parametrisation.html", "Parameterization Ressources needed Looking at the FRS module parameter file Exercice : filling the rest of the parameter file", " Parameterization In this section, we will learn to parameterize the FRS module properly, in order to use it in a simple LANDIS-II simulation. As you will see, this will require some skills in GIS software, in order to generates the raster maps needed by the module. To that end, we will fill a parameter file for the FRS module as an exercice, doing it step by step. Ressources needed In order to follow the exercise of this section, it is important that you have the following software installed on your computer : LANDIS-II v. 7 Age-only Succession Extension v. 5.2 Base Harvest Extension v. 5.1 FRS module v. 1.2 QGIS 3.X R or R studio Package gtools Package dplyr Package raster Package landscapemetrics  To install all of these R packages at once, use the command install.packages(\"gtools\", \"dplyr\", \"raster\", \"landscapemetrics\") in R. In addition, you need to download the data necessary for the exercices:  Click here ! Looking at the FRS module parameter file Go into the folder that youve downloaded, containing the files necessary for the exercice of the workshop. Then, go into the subfolder shared-parameters, and then disturbances. In this folder, youll find two files : one is the parameter file that we will fill throughout this exercice (roads.txt), and the second being the correction (roads_correction.txt). Open roads.txt and look at its contents. As you can see, the outline of the parameter file is already written. Some parameters are also already filled so that you can focus on the important ones. &gt;&gt; To be read properly, the parameter file must contain the parameters in this order. &gt;&gt;------------------------------------------------------------------------ &gt;&gt; BASIC PARAMETERS LandisData &quot;Forest Roads Simulation&quot; Timestep HeuristicForNetworkConstruction SkiddingDistance LoopingBehavior No OutputsOfRoadNetworkMaps ./output/disturbances/roads/roadNetwork.tif OutputsOfRoadLog ./output/disturbances/roads/ &gt;&gt;------------------------------------------------------------------------ &gt;&gt; INPUT RASTERS AND COST PARAMETERS &gt;&gt; Only the initial road network raster and the distance cost are &gt;&gt; essential. If you do not want to use one of the cost for the path- &gt;&gt; -finding, just indicate none as the parameter value for the raster &gt;&gt; location, and 0 for the value of the associated cost. &gt;&gt; These parameters are essential for the module to function RasterOfBuildableZones InitialRoadNetworkMap DistanceCost CoarseElevationRaster CoarseElevationCosts &gt;&gt; Lower elevation Upper elevation Additional &gt;&gt; threshold threshold value &gt;&gt; These parameters are optional, but can improve predictions FineElevationRaster None CoarseWaterRaster CoarseWaterCost FineWaterRaster None SoilsRaster None &gt;&gt;------------------------------------------------------------------------ &gt;&gt; ROAD TYPE THRESHOLDS AND MULTIPLICATION VALUES &gt;&gt; These parameters are all essential to the functioning of the &gt;&gt; extension. SimulationOfRoadAging Yes SimulationOfWoodFlux Yes RoadTypes &gt;&gt; Lower Wood Flux Upper Wood Flux Road type Multiplicative Maximum age Road Type &gt;&gt; threshold threshold ID Cost Value Before destruction Name RoadTypesForExitingWood &gt;&gt; Road type Road Type &gt;&gt; ID Name 8 Sawmill 9 MainRoadNetworkPaved Lets look at the parameters that are already set: LandisData is simply a parameter indicating to LANDIS-II that this parameter file is related to the FRS module. The LoopingBehavior parameter enables or disables the creation of loops in the network. In this exercice, we will keep it disabled. If you want to know more about how the looping algorithm functions and how to parameterize it, we refer you to the article presenting the module (Hardy et al. 2021), as well as the user guide. OutputsOfRoadNetworkMaps and OutputsOfRoadLog indicate where the output rasters and log of the module will be saved, relative to the location of the LANDIS-II scenario file. FineElevationRaster, FineWaterRaster and SoilsRaster are parameters indicating the location of the raster maps of topographic obstacles, streams and type of soils are located respectively. We will not use those in this exercice; therefore, they are all set to none. This is possible as the FRS module only requires the RasterOfBuildableZones, InitialRoadNetworkMap, DistanceCost, CoarseElevationRaster and CoarseElevationCosts cost parameters to function. The rest are optional. SimulationOfRoadAging and SimulationOfWoodFlux enable the simulation of road aging and wood fluxes respectively. RoadTypesForExitingWood is a table of parameters indicating the road type ID of the different exit points that can be found in our road landscape. Remember that exit points are places where the harvested wood can be delivered to. Here, two type of exit points are defined : sawmills and the main, paved road network. Since they have the ID 8 and 9, that means that every pixel in the initial road network map with the value 8 or 9 will be read by the FRS module as exit points. Also remember that every road landscape must initially contain exit points, and that their location do not change throughout the simulation. Now, lets fill the remaining parameters one by one. You can directly write fill out the parameters in the road.txt file and save it as you go. Exercice : filling the rest of the parameter file 1. The time step The time step of the FRS module should always be the same as the time step of the harvest extension that is chosen. This way, the FRS module always activates right after the harvest module have defined newly harvested areas, so that forest roads are constructed at the same timestep as the harvesting. As the base harvest extension is parametrized with a time step of 10 years, this time step will be the same for the FRS module. 2. The heuristic The FRS module proposes 3 different heuristics for the user : Closestfirst, Farthestfirst, and Random. Different heuristics will result in different forest road networks. From our experience as developers of the FRS module, using a different heuristic might affect some values (like specific fragmentation indices), but affect others much less or in an insignificant way (like the road density in the landscape). Tests made during the development of the module on existing cuts have revealed that the Closestfirst heuristic was best at predicting the location of real forest roads. We hypothesize that this is because forest roads are often constructed to nearest targets/harvested areas first by road engineers or forestry compagnies. We therefore recommend the Closestfirst heuristics, and will use it here. 3. The skidding distance The skidding distance is very important parameter that will heavily influence the road density of the simulated landscape. Indeed, as long as a road pixel is present near a recently harvested cell, no roads will be created to this cell: it will be considered that the wood is simply skidded toward the nearby road. Therefore, as the skidding distance parameter gets smaller, more road pixels will be created to cover the recently harvested areas. Skidding possibilities can depend on the region of interest, the topography, and the methods or technologies available. Currently, the FRS module uses a constant skidding distance for all of the landscape, and all of the simulation. Therefore, you should get informed as to what skidding methods are used in your landscape of interest. Your skidding distance can also serve to avoid taking into account skidding trails that are not large or permanent enough to be considered roads. For this exercice, we will use a skidding distance of 200m, which roughly corresponds to the maximum skidding distance observed in Quebec, where our simulated landscape is (Roa Cea 2011). 4. The raster of buildable areas Legislation in place can prevent forest roads from being built in certains areas. This needs to be taken into account, so that the FRS module can avoid these areas. The raster of buildable areas is a simple raster map that must have, like any raster map used by the FRS module, the same projection, extent and resolution as the other raster maps used by the LANDIS-II simulation. It contains 0 for pixels where roads cannot be built; and 1 for pixels where they can. In the case of this exercice, we will allow roads to be created everywhere in the landscape. Therefore, our raster of buildable areas will be filled with 1. To create such a raster, open QGIS, and follow the instructions : Add the initial-communities.tif raster used in our simulation into QGIS. It is found in the shared-rasters folder that you download earlier. Go into the Raster tab, and select Raster calculator. In the Raster calculator tool, select the initial communities raster, and click the button Selected Layer Extent. In the field at the bottom of the Raster calculator, just put the number 1. In the Output layer field at the top right of the Raster Calculator, input Buildable_zones_temp or any other name. Click on the Ok button. The resulting raster should be filled with values of 1. To finish preparing the raster for LANDIS-II, go again into the Raster tab, and select Conversion, and then the Translate tool. In the Translate tool, select the raster you just created. In the field Output data type of the Translate tool (near the bottom), choose int16, and click Run. Save the resulting raster (named Converted) by right clicking on it in the layers menu on the left of the screen, and selecting Export and Save as. When you save the raster, be sure to save it with the same CRS than the initial communities raster (by default, it should be the same). Save the raster with the name buildable_zones.tif into the shared-rasters folder. Dont close QGIS yet. We will need it for other operations ! Now, you should be able to write the path to the buildable_zones.tif raster into the roads.txt file. The path should look like this in roads.txt: Click for Answer RasterOfBuildableZones \"../shared-rasters/buildable_zones.tif\" 5. The initial road network map The initial road network map describes the state of the road landscape at the beginning of the simulation. A pixel with a value of 0 implies that no road exist in the pixel. All other values to be used in this raster must correspond to a road type ID or an exit point ID described in the parameter file of the module. The user can define as many road type IDs or exit point IDs as they want, so as to adapt to the road types or classification that might exist in the landscape. Here, we will use a shapefile that contains the roads that exist in our landscape. The shapefile is in the folder spatial-data, and is named road_network.shp. Start by adding road_network.shp in the layers of QGIS. Then, right click on the resulting layer in the layer menu, and choose the option Open attribute table. This table shows the attributes associated with every line in the shapefile. You will see that it has a road_type attribute, with three different possible values : Primary, Secondary and Tertiary. We will have to transform this value into single numbers, that we will use as road type IDs, and then burn them into a raster map. During our exercices, we will use the following classification, and the following road type IDs: Road type attribute (in the shapefile) Road type ID (for the FRS module) Primary 1 Secondary 2 Tertiary 3 To create the new attribute table containing the road type IDs for each line of the road layer, follow these instructions in QGIS: While in the window of the attribute table, click on the small pencil icon on the top left of the window to put the layer into edition mode. Click on the Open field calculator button on the top of the window (the one representing an abacus), or press CTRL + i while in the window of the attribute table. Name the new field TYPE_ID, and choose the field type While number (integer), with an output field length of 2. In the Expression field, type or paste the following expression : if( \"ROAD_TYPE\" = 'PRIMARY', 1, if( \"ROAD_TYPE\" = 'SECONDARY', 2, if( \"ROAD_TYPE\" = 'MAIN_PAVED' , 9, 3))) If you are not used to such expressions to calculate attributes values of shapefiles, take the time to read the expression. Notice that it is made of three if statements, one in the other. The first if states that if the ROAD_TYPE field for a particular line is equal to the value PRIMARY, we want this new ROAD_TYPE field to have the value 1. If not, we make a second test : if the value is SECONDARY, we want the value 2. If not, we make a third test : if the value is MAIN_PAVED, its an exit point; and so, we want the value 9 (as it will be an exit point of the Main paved road network category). If not, the value will have to be TERTIARY, and so we want the value 3 in return. Click the Ok button of the field calculator window. Once that you are back in the attribute table window, click again on the pencil icon to finish the edition, saving the changes in the process. Now, we can burn the TYPE_ID attribute associated to each line into raster cells. To that end, follow the instructions: Go into the Raster tab, then Conversion, then choose the Rasterize (Vector to raster). As an input layer, choose the road_network layer that you just edited. In Field to use for a burn-in value, select TYPE_ID. Do not choose a fixed value to burn in the raster. Now, we have to give information about the resolution and extent of the resulting raster. In Output raster size units, choose Georeferenced units. In Horizontal resolution and Vertical resolution, input 100 (as the cells of the raster we use are 100m x 100m). In Output extent, click on the ... button on the right, and choose Calculate from layer. Choose the initial-communities layer. Down in the window, change the Output data type to int16. Click Run. Save the resulting raster in the folder shared-raster with the name initial_road_network.tif The resulting raster should look like this: Click for Answer Now that the raster is done, you should be able to write the path to the initial_road_network.tif into the roads.txt file. The path should look like this in roads.txt: Click for Answer InitialRoadNetworkMap \"../shared-rasters/initial_road_network.tif\" 6. The basal distance cost, and the coarse elevation cost Parameters related to the construction cost of forest roads have an important effect on their paths, as they will be least-cost paths chosen by the pathfinding algorithm. These costs can be difficult to gather, as they are dependent on a high variety of factors, and are not very studied. However, a good estimation of such costs can be obtained by directly asking experts, or by gathering cost data from government agencies or forestry industries. Here, we will derive the two cost parameters that are essential for the FRS module to function from a dataset of construction costs of forest roads. We will do so by using a statistical model (linear regression) applied onto the data. To start, open the file road_costs_data.csv located in the exercices-prepare-parameters folder. Observe the structure of the data. We have the response variable cost, and two explanatory variables, slope and road_type. cost is simply the cost of construction of 100m of a road on slope with the grading described by slope, and of the road type described by road_type. From this dataset, we want to obtain two different parameters : The basal distance cost is the cost of construction of a road in the best possible conditions. It is, in essence, the irreducible cost of constructing a road on the distance of a cell. Therefore, the basal distance cost can correspond to the intercept of a linear regression that we will apply on the dataset. The additional cost due to the elevation (or coarse elevation cost) corresponds to the added cost of construction a forest road on a given slope, when compared to the basal distance cost. It can correspond the effet of the slope as a factor in a linear regression, when applied on a dataset similar to ours.  The term Coarse elevation in the name of the parameters refers to the slope; while the term Fine elevation refers to topographic obstacles such as cliffs or breaks. See the the user guide for more information. We will compute these costs only for a reference road type that we will choose. This is because the FRS module uses multiplicative values (relative to the reference road type) to determine the construction cost of different road types. You will learn more about these multiplicative cost values in a later section. Here, we will choose the lowest road type - Tertiary, for small forest roads with low traffic - as a reference. In effect, this means that we will apply a linear regression only for the lines of our data table that corresponds to the road type Tertiary. This also mean that we will not indicate the effect of the factor road_type in our linear regression. To obtain these parameters, open the file correction_script_to_get_parameters.R with R studio. You can also open it with R if you prefer; but you might have to adapt one or two commands. Run the script line by line up to section 9 of the script, reading the commentaries present in the script as you go. if you are not familiar with R code, you can take the time to understand in detail what the different commands correspond to. Dont close R studio when you are done. We will still need it later ! When you are done, write the value of the basal distance cost and the additional costs due to the elevation into the roads.txt file. Remember that the additional elevation cost for a slope of 0 to 9% is going to be 0, as this is the level of reference. For slope degrees superior to 41%, input a punitive value in order to prevent the FRS module from building roads onto such a slope. In the end, the parameters should look like this in roads.txt: Click for Answer DistanceCost 894.1 CoarseElevationCosts &gt;&gt; Lower elevation Upper elevation Additional &gt;&gt; threshold threshold value 0 9 0 9 16 127.9 16 41 511.5 41 10000 10000000 7. The elevation raster The elevation raster is pretty straight-forward to understand. It is a raster map where each pixel equals the mean elevation value for the terrain in the pixel. From this map, the FRS module will compute a mean slope value between one pixel and its neighbors. The elevation raster can be derived from a Digital Elevation Model. Here, we will use data from the Canadian Digital Elevation Model. You can find the two raster tiles of the DEM that overlap with our study area in the spatial-data folder. They are named cdem_dem_031P.tif and cdem_dem_032A.tif. Then, follow these instructions in QGIS to create the elevation map for our simulations : Unzip, then add the two raster tiles that you download as layers in QGIS. [Optional] If you still have the initial road network opened as a layer in QGIS, look at its superposition with the elevation rasters that you added. Do you notice anything ? Click for Answer You can see that many of the roads in our landscape follow the elevation of the land. In particular, you can see that existing roads are often parallel to riverbeds. Go into the Raster tab, then Miscellaneous, and choose the tool Merge. In the Input layers field of the Merge tool, click the ... button on the right and select the two elevation rasters. Click Run. Go into the Raster tab, then Projections, and choose the tool Warp. As Input layer, choose the Merged raster that you just created. In Target CRS, choose EPSG:32198 - NAD83 / Quebec Lambert. In Output file resolution in target georeferenced units, choose 100. As Output data type, choose Int32. Click Run. Go into the Raster tab, then Extraction, and choose the tool Clip raster by extent. In Input layer, choose the raster you created with the Warp tool (normally named Reprojected). In Clipping extent, use the ... button on the right; then select Calculate from layer, and then choose the initial communities layer (or a raster that we created previously). Click Run. Save the resulting raster in the shared-rasters folder, with the name coarse_elevation.tif. The resulting raster should look like this : Click for Answer Now that the raster is done, you should be able to write the path to the coarse_elevation.tif into the roads.txt file. The path should look like this in roads.txt : Click for Answer CoarseElevationRaster \"../shared-rasters/coarse_elevation.tif\" 8. The coarse water raster The coarse water raster is one of the optional rasters. Still, we will take it into account, as rivers and lakes are numerous in our landscape and will heavily influence the location of roads. The coarse water raster is really simple, as it contains either 0 for the absence of water, and numbers superior to 0 for the presence of water.  The term Coarse water in the name of the parameters refers to what is often called surface hydrology in GIS langage, meaning lakes and rivers represent by polygons in vectorial data. Meanwhile, the term Fine water refers to what is called linear hydrology in GIS data, meaning streams whos width is not known or very small, and who are represented in vectorial data by lines rather than by polygons. See the the user guide for more information. The coarse water raster can easily be derived from hydrological data. Here, we will use data from the 5th provincial forest inventory of Québec. To create the coarse water raster, follow these instructions in QGIS : Add the file lakes_rivers.shp in the folder spatial-data as a layer in QGIS. Go into the Raster tab, then Conversion, and choose the tool Rasterize (Vector to raster). As Input layer, choose the lakes_rivers layer. Dont choose a Field to use for a burn-in value. In A fixed value to burn, input 1. In Output raster size units, choose Georeferenced units. In Horizontal resolution and Vertical resolution, input 100. In Output Extent, click on the ... button on the right, and choose Calculate from layer, then select the initial communities raster (or any raster that we have created before). In Output data type, choose Int16. Click Run. Look at the resulting raster. Do you notice anything important ? Click for Answer You can see that the rasterized rivers are often not continuous: there are holes in the path. These holes are important, as the pathfinding algorithm will use them to cross the rivers without taking into account the price of constructing a bridge. These holes are the result of the algorithm used by the Rasterize tool of QGIS. If a cell superpose just slightly with a polygon, then the polygon isnt considered as rasterized in this cell. We will have to take care of that. Re-open the Rasterize tool, and fill it with the same instructions as before. However, in the Additional command-line parameters field, write -at.  The -at additional parameter that we use here is a parameter for the GDAL engine that is used in the Rasterize tool, and means ALL_TOUCH. With this parameter, every cell touching a polygone of surface water is going to be considered as containing water. Click Run. Save the resulting raster in the shared-rasters folder, with the name coarse_water.tif. The resulting raster should look like this : Click for Answer Now that the raster is done, you should be able to write the path to the coarse_water.tif into the roads.txt file. The path should look like this in roads.txt: Click for Answer CoarseWaterRaster \"../shared-rasters/coarse_hydrology.tif\" 9. The coarse water cost The coarse water cost represent the cost of building a road across a cell containing body of water (larger than a stream). In essence, this cost is supposed to be the cost of building a bridge section on the distance of a cell. This cost can be estimated by looking at the cost of construction of existing bridges. However, asking for expert opinion can be a quicker option. It is also possible to input what is called a punitive value, meaning a value that is chosen arbitrarily to prevent the pathfinding algorithm to go through rivers and lakes as much as possible. Be warned that choosing a punitive value that is unrealistic will result in skewed estimations of construction costs during the simulation, as long as the module is forced to cross rivers at some point. It might also result in un-realistic long detours to avoid a small crossing. Here, we will use a number that has been given to us by experts at the Ministère des Forêts, de la Faune et des Parcs (MFFP) du Québec. This cost will be of 300000. 10. The road types As we have said earlier, the user can define different road types in the landscape, with associated with different level of traffic of wood trucks, different lifespans (before being destroyed by wearing), and different costs of construction. Here, we will use the three road types present in the database of cost that we saw in exercice : Primary, Secondary and Tertiary. You can start inputting them in roads.txt. The section describing the road types in roads.txt should look like this: Click for Answer RoadTypes &gt;&gt; Lower Wood Flux Upper Wood Flux Road type Multiplicative Maximum age Road Type &gt;&gt; threshold threshold ID Cost Value Before destruction Name 3 Tertiary 2 Secondary 1 Primary 11. The flux thresholds for each road type The flux thresholds of each road type correspond to limits of wood trucks traffic on a forest road, for the length of a time step. Above these limits, a forest road will have to be upgraded to a higher-grade (larger) type to support the higher traffic. They are used when the wood fluxes are enabled in the simulation. To facilitate the input, these thresholds directly refer to the transport of quantities of wood, without taking into account the wood that can be transported by a single truck. Currently, the wood transported is expressed in units of age cohorts harvested in a cell. This is so that the FRS module can be used with any harvest extension (Base Harvest or Biomass Harvest). These parameters can be estimated in different ways. Empirically, they can be chosen so that, on average and for a business as usual scenario, the proportion of the different types of road in the simulated landscape remains the same as the proportion of the initial, existing road network. They can also be decided arbitrarily. We will use use flux thresholds that we determined empirically, and that are of 0-70 for Tertiary roads; 70-40000 for Secondary roads; and 40000-100000 for Primary roads. You can input these in roads.txt. The section describing the road types in roads.txt should look like this: Click for Answer RoadTypes &gt;&gt; Lower Wood Flux Upper Wood Flux Road type Multiplicative Maximum age Road Type &gt;&gt; threshold threshold ID Cost Value Before destruction Name 0 70 3 Tertiary 70 40000 2 Secondary 40000 100000 1 Primary 12. The multiplicative cost values for each road type The multiplicative cost values serves to compute the cost of a given road type, related to a road type of reference. In our case, our road type of reference is the smallest, cheapest type: Tertiary. Since it is the road type of reference, its multiplicative cost value will be of 1. This is because the cost that is calculated by the pathfinding algorithm (using the cost parameters we calculated before) is the cost of construction for the reference road type. Therefore, the multiplicative cost value of 1 assures that the cost of construction for a Tertiary road will be the same as the one computed by the pathfinding algorithm. Meanwhile, as the Secondary and Primary road types are larger and more expensive to construct than Tertiary roads, their multiplicative values will be superior to 1. On the contrary, if we had a road type smaller than the reference type, its multiplicative cost value would be inferior to 1. When a road will need to be updated from a the Tertiary type to another, the cost of upgrade will correspond to the cost of construction of the higher road type, minus the one for the cheaper road type. Multiplicative cost values are used to facilitate the parametrization for the user, and avoid multiple interactions parameters between the types of roads and the other cost parameters (e.g. having a different Basal distance cost parameter by road type). To compute the multiplicative cost values of each road type, we will again use the dataset of construction costs that we used in section 6. We will simply compare the average construction cost (all slope categories included) of Tertiary roads (the reference type) with the one of Secondary and Primary roads. For example, the multiplicative cost value of Secondary roads will be their average construction cost, divided by the average construction cost of Tertiary roads. To compute those costs, simply execute in R or R studio the sections 10 and 11 of the R script correction_script_to_get_parameters.R. In the end, the parameters should look like this in roads.txt: Click for Answer RoadTypes &gt;&gt; Lower Wood Flux Upper Wood Flux Road type Multiplicative Maximum age Road Type &gt;&gt; threshold threshold ID Cost Value Before destruction Name 0 70 3 1 Tertiary 70 40000 2 2.38 Secondary 40000 100000 1 14.12 Primary 13. The maximum age for each road type The maximum age of the road types indicates how long a road will last before being destroyed by wear (erosion, passage of vehicles, etc.). It can be obtained via experts opinion, but can also be found in documents from forestry industries or governmental reports. In our case, we will use ages specified in the classification of roads by the MFFP of Quebec. Theses maximum ages before destruction for Tertiary, Secondary and Primary road types will thus be 1, 15 and 25 respectively. You can input those parameters in roads.txt, which will end the exercice. The parameters related to the road types should look like this: Click for Answer RoadTypes &gt;&gt; Lower Wood Flux Upper Wood Flux Road type Multiplicative Maximum age Road Type &gt;&gt; threshold threshold ID Cost Value Before destruction Name 0 70 3 1 1 Tertiary 70 40000 2 2.38 15 Secondary 40000 100000 1 14.12 25 Primary Correction Now that the exercice is over, you can check if youve filled the roads.txt filled correctly by comparing your version with the file roads_correction.txt present in the same folder. Here is the content of roads_correction.txt: Click for Answer &gt;&gt; To be read properly, the parameter file must contain the parameters in this order. &gt;&gt;------------------------------------------------------------------------ &gt;&gt; BASIC PARAMETERS LandisData &quot;Forest Roads Simulation&quot; Timestep 10 HeuristicForNetworkConstruction Closestfirst SkiddingDistance 200 LoopingBehavior No OutputsOfRoadNetworkMaps ./output/disturbances/roads/roadNetwork.tif OutputsOfRoadLog ./output/disturbances/roads/ &gt;&gt;------------------------------------------------------------------------ &gt;&gt; INPUT RASTERS AND COST PARAMETERS &gt;&gt; Only the initial road network raster and the distance cost are &gt;&gt; essential. If you do not want to use one of the cost for the path- &gt;&gt; -finding, just indicate none as the parameter value for the raster &gt;&gt; location, and 0 for the value of the associated cost. RasterOfBuildableZones &quot;../shared-rasters/buildable_zones.tif&quot; InitialRoadNetworkMap &quot;../shared-rasters/initial_road_network.tif&quot; DistanceCost 894.1 CoarseElevationRaster &quot;../shared-rasters/coarse_elevation.tif&quot; CoarseElevationCosts &gt;&gt; Lower elevation Upper elevation Additional &gt;&gt; threshold threshold value 0 9 0 9 16 127.9 16 41 511.5 41 10000 10000000 FineElevationRaster None CoarseWaterRaster &quot;../shared-rasters/coarse_hydrology.tif&quot; CoarseWaterCost 1400000 FineWaterRaster None SoilsRaster None &gt;&gt;------------------------------------------------------------------------ &gt;&gt; ROAD TYPE THRESHOLDS AND MULTIPLICATION VALUES &gt;&gt; These parameters are all essential to the functioning of the &gt;&gt; extension. SimulationOfRoadAging Yes SimulationOfWoodFlux Yes RoadTypes &gt;&gt; Lower Wood Flux Upper Wood Flux Road type Multiplicative Maximum age Road Type &gt;&gt; threshold threshold ID Cost Value Before destruction Name 0 70 3 1 1 Tertiary 70 40000 2 2.38 15 Secondary 40000 100000 1 14.12 25 Primary RoadTypesForExitingWood &gt;&gt; Road type Road Type &gt;&gt; ID Name 8 Sawmill 9 MainRoadNetworkPaved References "],["03-results-analysis.html", "Analyzing simulation results Ressources needed Understanding the two scenarios Looking at the cost map generated by the FRS module Launching the simulations Looking at the outputs with QGIS Analyzing the results with R", " Analyzing simulation results In this section, we will launch two different LANDIS-II scenarios using the FRS module, and analyze their results. These scenarios will be identical, except for the fact that we will change the level of aggregation of the cut areas. Hence, looking at the results will allow us to see the effect of cut aggregation on several characteristics of the landscape. Ressources needed In order to follow the exercise of this section, it is important that you have the following software installed on your computer : LANDIS-II v. 7 Age-only Succession Extension v. 5.2 Base Harvest Extension v. 5.1 FRS module v. 1.2 QGIS 3.X R or R studio Package gtools Package dplyr Package raster Package landscapemetrics  To install all of these R packages at once, use the command install.packages(\"gtools\", \"dplyr\", \"raster\", \"landscapemetrics\") in R. In addition, you need to download the data necessary for the exercices:  Click here !  If you did not do the parameterisation exercice, copy the content of roads_correction.txt into the file road.txt, both located in the shared-parameters/disturbances folder. In addition, copy all of the rasters present in the folder shared-rasters/correction into shared-rasters. Understanding the two scenarios Open the folder scenario-no-aggregation, and look at its files. You will see that it contain a LANDIS-II scenario file (scenario-no-aggregation.txt), a script to run the scenario (run-scenario-no-aggregation.bat), and a folder with the parameter file of the Base harvest extension. All of the other parameter files needed by this scenario are present in the folders shared-rasters and shared-parameters. The folder scenario-with-aggregation has the exact same structure. The only change between the two scenarios is in the SiteSelection PartialStandSpread parameter. In the scenario without aggregation, the parameter is equal to the range between 1 and 200. This means that the Base harvest extension will try to make cuts of 200 hectares but will stop if it cant fullfil the other conditions; and that it will accept cuts as small as 1 hectare. In the scenario with aggregation, the maximum limit of the cuts is increased to 1000 hectares, leading to much bigger (yet fewer) cut areas. Before running the simulations, we will take a look at what happens when we change the parameters of the FRS module. Looking at the cost map generated by the FRS module With only the basal distance cost Create a copy of the file roads.txt in the shared-parameters/disturbances folder, and then open it in a text editor. In addition, open the scenario-no-aggregation folder, and the software QGIS. We will now edit the roads.txt file to better understand how the FRS module sees your landscape. First, remove replace all of the additional cost values for the CoarseElevationCosts parameter with 0. You should now have the following: CoarseElevationCosts &gt;&gt; Lower elevation Upper elevation Additional &gt;&gt; threshold threshold value 0 9 0 9 16 0 16 41 0 41 10000 0 Then, input the word none in place of the CoarseWaterRaster parameter. You should now have the following: CoarseWaterRaster none Then, delete the line corresponding to the CoarseWaterCost parameter. No, run the file run-scenario-no-aggregation.bat located in the folder scenario-no-aggregation. A command prompt will open, running a LANDIS-II simulation. Read the text of the command prompt carefully. Once that the initialization phase of the fifth timestep of the simulation is over (when you can read Current time: 60 in the command prompt), close the command prompt. Then, load the rasters roadNetwork-Cost Raster.tif and roadNetwork-60.tif present in the folder scenario-no-aggregation/output/disturbances/roads as layers in QGIS. The roadNetwork-Cost Raster.tif raster is a raster representing the cost map as computed by the FRS module, according to the cost parameters and maps that we entered. In each of its cell is the estimated average construction cost of a forest road traversing the cell, for a reference road type (see section 2). This cost map is used by the pathfinding algorithm of the FRS module in charge of deciding the path of the roads. Look at this raster. Do you notice anything strange ? Click for Answer Currently, all of the cells of the roadNetwork-Cost Raster.tif raster contain the same value, 894. This value is the basal distance cost that we found in section 2, exercice 6. This is because we inputed no cost parameter except the basal distance cost. Elevation, obstacles, water bodies, streams and soils are not taken into account. Therefore, from the point of view of the FRS module, the landscape is a plain, homogeneous area where the cost of construction doesnt change. Now, look at the roadNetwork-60.tif raster, which contains a snapshot of the roads landscape at the end of the first timestep of the simulation. Do you notice anything strange ? Click for Answer At the time step 60, the initial roads have disparead because if road aging, and have been replaced by roads entirely constructed by the FRS module. We can see that many of the roads built by the module are straight lines. This is because the cost of construction is the same in all of the cells of the cost map: in those conditions, the least-cost path between two points found by the pathfinding algorithm is always a straight line. Therefore, if you see straight lines in your results, you can be sure that it is because the FRS module traversed an area with an homogeneous cost of construction. This is often a sign that something is wrong in the parameterization. With elevation costs included Now, re-establish the correct values of the additional costs due to elevation in the file roads.txt, but keep the CoarseWaterRaster and CoarseWaterCost at none and deleted respectively. Close the layers roadNetwork-Cost Raster.tif and roadNetwork-60.tif in QGIS, so that LANDIS-II can update them. Relaunch the file run-scenario-no-aggregation.bat locateed in the folder scenario-no-aggregation, and once again, wait after LANDIS-II has reached the 6th time step to stop the simulation. Open the rasters roadNetwork-Cost Raster.tif and roadNetwork-60.tif in QGIS again. Look at roadNetwork-Cost Raster.tif in QGIS. Double click on the layer corresponding to it in the layer menu, and change its colors in the Symbology tab. What do you see ? Click for Answer Now, we can see that the cost map is not entirely homogeneous anymore. We can now distinguish 4 different types of costs, which correspond to the 4 levels of slope that we defined : 0-9%, 9-16%, 16-41%, and 41% to maximum values. Hence, the cost map became much more complex than before. Now, look at the roadNetwork-60.tif raster in QGIS. Try to superimpose it to the cost map. What differences do you notice with what it was before ? Click for Answer We can see that the simulated road network contains a lot less straight roads, and that the path of the roads is often in less costly pixels. However, we can still notice some straight roads where areas of homogeneous cost exist. With elevation and water bodies included Now, re-establish the correct values for the CoarseWaterRaster and CoarseWaterCost parameters in the file roads.txt. Close the layers roadNetwork-Cost Raster.tif and roadNetwork-60.tif in QGIS, so that LANDIS-II can update them. Relaunch the file run-scenario-no-aggregation.bat locateed in the folder scenario-no-aggregation, and once again, wait after LANDIS-II has reached the 6th time step to stop the simulation. Open the rasters roadNetwork-Cost Raster.tif and roadNetwork-60.tif in QGIS again. Look at roadNetwork-Cost Raster.tif in QGIS. Double click on the layer corresponding to it in the layer menu, and change its colors in the Symbology tab. What do you see ? Click for Answer On this image, the pixels containing bodies of water have been colored in blue so as to better distinguish them from the rest. We can now see that the cost map is complex and detailed. Homogeneous areas in terms of cost are few, and the pathfinding algorithm will have many features to avoid (steep slopes, lakes and rivers). Now, look at the roadNetwork-60.tif raster in QGIS. Try to superimpose it to the cost map. What differences do you notice with what it was before ? Click for Answer We can see that the simulated road network now contains very few straight roads, and that road paths tend to follow elevation lines, and especially riverbeds. In conclusion, you can see that taking a look at the cost map generated by the FRS module is important to validate your parameterization, and avoid mistakes or incoherencies in your results. In particular, you should look out for : Large areas with homogeneous costs Islands which do not have an exit point of them (meaning that the FRS module will create a bridge to reach the island, even if the wood is supposed to be floated away) Areas with costs that are too high or too low Launching the simulations Now, make sure that the file roads.txt is complete. In case of doubts, copy and paste the contents of roads_corrections.txt inside of it. Then, run the file run-scenario-no-aggregation.bat located in the folder scenario-no-aggregation and the file run-scenario-with-aggregation.bat located in the folder scenario-with-aggregation. Wait for the two simulations to finish. Looking at the outputs with QGIS Go into the scenario-no-aggregation/output/harvest folder, and load the raster prescripts-10.tif as a layer in LANDIS-II. Now, do the same for the scenario-with-aggregation folder. What do you notice ? Click for Answer We can see that the cut areas in the scenario with aggregation are fewer, but much bigger that the cut areas in the scenario without aggregation. Now, open the raster roadNetwork-60.tif from the scenario with and without aggregation in QGIS. What differences do you notice between the two ? Click for Answer We can see that in the scenario with aggregation, forest roads are less scattered than in the scenario with aggregation. They form dense networks of smaller roads inside the large cut areas, and link those together with higher-type roads traversing the landscape. In the scenario with aggregation, those patches of smaller roads corresponding to harvested areas are more scattered, leading to more higher-type roads linking them together. Analyzing the results with R Now, open the file correction-result-analysis located in the exercice-analyse-results folder in R studio or R. Run the script line by line up to section 5 of the script, reading the commentaries present in the script as you go. if you are not familiar with R code, you can take the time to understand in detail what the different commands correspond to. Once that you have ran all of the commands of the section 5 of the script, look at the plot that the script have generated (showing the evolution of the road density in the landscape through time). What do you notice ? How do you interpret it ? Click for Answer We can see two things happening on the graph. First, we see a drastic decrease in the road density of the landscape, followed by a stabilisation showing a difference between the two scenarios. The drastic decrease at the beginning of the simulation is due to the initial road network disappearing because of road aging. This happens when most of the forest roads of the initial road network are not necessary for the FRS module to reach harvested areas. When this happens, these initial roads will simply disappear if road aging has been simulated. The speed at which the forest road disappear depend on 1) the proportion of road types among the forest road pixels (primary, secondary, etc.); and 2) the maximal age associated to the road types. Here, our initial landscape is composed of many secondary roads, associated with the maximum age 15. Since all roads start with an age of 0, it will take two timestep for those roads to be destroyed if they are not maintained. Now, run the commands of the section 6. Look at the plot that the script have generated (showing the evolution of the road costs through time). What do you notice ? How do you interpret it ? Click for Answer In this graph, we see the same tendancy as the graph showing the evolution of the road density. It starts by a important decrease in costs of construction and repairs, followed by a relative stabilization of them through time. First, lets look at the initial decrease. It comes from the fact that the first time step (t = 10) starts with a very important cost of construction. This can seem counter-intuitive, as the initial landscape contains many roads that the FRS module can use instead of build. However, if we look at the outputs of LANDIS-II, we can see that this timestep contains many harvested area in the top-right of our landscape in both scenarios (resulting from patches of older forest that are favoured by the harvest extension). This leads to a huge flux of timber that passes through the initial road landscape, requiring to upgrade many road pixels to primary roads (which are very expensive) to adapt to this flux. This price of road upgrade is increased even more by the fact that the FRS module will go through the existing, initial road network so as to avoid building roads. However, this forces it to use a long path to reach the main road network in the south, as the initial road network does not present a road that is relatively short to reach it. In future version, the FRS module will be able to find a better option. Therefore, remember that the FRS module can currently present behaviours that might seem strange in initial timesteps. These can be due to the particular configuration of harvested areas, or the structure of the initial road network. The second part of the graph shows no clear differences between the scenario with and without aggregation of the cuts, in terms of costs of construction and repairs. This is due to the fact that while the scenario with aggregation might result in fewer roads, it also requires a higher proportion of large roads to accomodate the flux of timber trucks that will pass through this smaller amount of roads. This conclusion remains very sensitive to the flux threshold parameters for each road types, and should be taken with a grain of salt. Now, run the commands of the section 7. Look at the plots that the script have generated (showing the evolution of the Clumpy and TCA fragmentation indices through time). What do you notice ? How do you interpret it ? Click for Answer We can see that Clumpy and TCA are both slightly higher for the scenario with aggregation, implying less structural fragmentation of the landscape. An interesting difference is that TCA (Total Core Area) is a index relative to the core area of the landscape (here, defined as pixels further than 100m from a forest edge), while Clumpy relates to the aggregation of the pixels of forests. TCA is also much more correlated to the quantity of habitat of the landscape than Clumpy is (Wang, Blanchet, and Koper 2014). These differences explain why TCA reacts differently than Clumpy, and especially why the difference between scenarios is increased with TCA. This is because the scenario with aggregation reduces the fragmentation of the landscape (as shown by Clumpy), but also increases the quantity of forest in the lanscape (as less surface of forest is transformed into roads), benefiting TCA. References "],["04-ending.html", "Final word", " Final word Thank you for following this training workshop for the FRS module ! If you want to use it for your own research, you can find suggestion of parameterization methods in the article presenting the module (Hardy et al. 2021), as well as the user guide. If you have any questions related to the functionning of the module, you can send me an e-mail at clem.hardy@outlook.fr. In case of issues or bugs, please indicate them in the issues section of the GitHub repository for the FRS module. References "],["05-references.html", "References", " References "]]
